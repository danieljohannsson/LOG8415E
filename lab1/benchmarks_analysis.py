from datetime import datetime, timedelta
import json
import boto3
import pandas as pd
import matplotlib.pyplot as plt

class BenchmarksAnalysis:
    """ Metric generator used to retrieve CloudWatch metrics of target groups 
    and generate plots.
    """

    def __init__(self, elb_id, cluster_t2_id, cluster_m4_id, cluster_t2_instances_ids, cluster_m4_instances_ids):
        """Initiate MetricGenerator and print ELB and Cluster IDs."""
        self.cloudwatch = boto3.client('cloudwatch')
        self.elb_id = elb_id
        self.cluster_t2_id = cluster_t2_id
        self.cluster_m4_id = cluster_m4_id        
        self.cluster_t2_instances_ids = cluster_t2_instances_ids
        self.cluster_m4_instances_ids = cluster_m4_instances_ids

        self.metrics_instances = ['CPUUtilization']

        # Correspondance between metric and the relevant stat [Average, Sum, Min, Max]
        self.metrics_stat = {
            'HTTPCode_ELB_2XX_Count': 'Sum', #number of HTTP 2XX client error codes that originate from the load balancer
            'HTTPCode_ELB_4XX_Count': 'Sum', #number of HTTP 4XX client error codes that originate from the load balancer
            'HTTPCode_ELB_5XX_Count': 'Sum', #number of HTTP 5XX server error codes that originate from the load balancer
            'RequestCountPerTarget': 'Sum', #average number of request per target
            'TargetResponseTime': 'Average', #time after the request leaves the load balancer until a response from the target is received
            'HTTPCode_Target_2XX_Count': 'Sum', #number of HTTP response codes generated by the targets
            'HTTPCode_Target_4XX_Count': 'Sum',
        }
